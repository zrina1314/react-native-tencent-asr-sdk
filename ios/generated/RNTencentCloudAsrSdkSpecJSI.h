/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeTencentCloudAsrSdkCxxSpecJSI : public TurboModule {
protected:
  NativeTencentCloudAsrSdkCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual bool setup(jsi::Runtime &rt, double appid, double projectId, jsi::String secretId, jsi::String secretKey, jsi::String saveFilePath) = 0;
  virtual double startRecording(jsi::Runtime &rt) = 0;
  virtual double stopRecording(jsi::Runtime &rt) = 0;
  virtual double cancelRecording(jsi::Runtime &rt) = 0;
  virtual jsi::Value recognizerFile(jsi::Runtime &rt, jsi::String filePath, jsi::String voiceFormat, jsi::String engSerViceType) = 0;

};

template <typename T>
class JSI_EXPORT NativeTencentCloudAsrSdkCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "TencentCloudAsrSdk";

protected:
  NativeTencentCloudAsrSdkCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeTencentCloudAsrSdkCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeTencentCloudAsrSdkCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTencentCloudAsrSdkCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    bool setup(jsi::Runtime &rt, double appid, double projectId, jsi::String secretId, jsi::String secretKey, jsi::String saveFilePath) override {
      static_assert(
          bridging::getParameterCount(&T::setup) == 6,
          "Expected setup(...) to have 6 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::setup, jsInvoker_, instance_, std::move(appid), std::move(projectId), std::move(secretId), std::move(secretKey), std::move(saveFilePath));
    }
    double startRecording(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::startRecording) == 1,
          "Expected startRecording(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::startRecording, jsInvoker_, instance_);
    }
    double stopRecording(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stopRecording) == 1,
          "Expected stopRecording(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::stopRecording, jsInvoker_, instance_);
    }
    double cancelRecording(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::cancelRecording) == 1,
          "Expected cancelRecording(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::cancelRecording, jsInvoker_, instance_);
    }
    jsi::Value recognizerFile(jsi::Runtime &rt, jsi::String filePath, jsi::String voiceFormat, jsi::String engSerViceType) override {
      static_assert(
          bridging::getParameterCount(&T::recognizerFile) == 4,
          "Expected recognizerFile(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::recognizerFile, jsInvoker_, instance_, std::move(filePath), std::move(voiceFormat), std::move(engSerViceType));
    }

  private:
    friend class NativeTencentCloudAsrSdkCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
